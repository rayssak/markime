(* Sample latex-translator for ML-Yacc *)

fun print_exec(txt: string) =
  let
    val outs = TextIO.openAppend "teste.tex"
    fun helper(txt_aux: string) =
          (TextIO.output(outs,txt_aux); TextIO.closeOut outs)
  in
    helper(txt)
  end

fun printList ([]:string list) = print_exec ""
	| printList (h::nil:string list) = print_exec h
	| printList (h::tail:string list) =(print_exec h; printList tail);

fun trim s =
   let
       fun trimStart (#" "::t) = trimStart t
         | trimStart (#"\t"::t) = trimStart t
         | trimStart l = l

       fun trimEnd (#"#"::t) accum = rev accum
         | trimEnd (#"\n"::t) accum = rev accum
         | trimEnd (h::t) accum = trimEnd t (h :: accum)
         | trimEnd [] accum = rev accum
   in
       String.implode (trimEnd (trimStart (String.explode s)) [])
   end

  fun atoi s = case Int.fromString s of SOME num => num | NONE => 0;


  fun plusString (s: string, t: string) = Int.toString(atoi(s) + atoi(t));
  fun substractString (s: string, t: string) = Int.toString(atoi(s) - atoi(t));
  fun divideString (s: string, t: string) = Real.toString(Real.fromInt(atoi(s)) / Real.fromInt(atoi(t)));
  fun multiplyString (s: string, t: string) = Int.toString( atoi(s) * atoi(t) );
%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int


%term IT | NEG | ITNEG | LINK | ASPAS | PARAGRAPH | SEMI | ITENIZE | PAR_OPEN | PAR_CLOSE | COMMAND_START | COMMAND_END | EOF | TXT of string | NUM of string | CONCAT | PLUS | SUB | DIV | TIMES
%nonterm EXP of string | START of string option | ASPASNONTERM of string | ITNONTERM of string | NEGNONTERM of string | ITNEGNONTERM of string

%name Markime

%prefer TIMES DIV PLUS SUB

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START : EXP (print_exec(EXP^"\n"); (SOME EXP))
	| (NONE)

  EXP : ITNONTERM (ITNONTERM)
      | NEGNONTERM (NEGNONTERM)
      | ASPASNONTERM (ASPASNONTERM)
      | COMMAND_START EXP ("\\begin{"^EXP^"} ")
      | LINK PAR_OPEN EXP PAR_CLOSE ("[ "^EXP^" ] {"^EXP^"}")
      | ITNEGNONTERM (ITNEGNONTERM)
      | COMMAND_END EXP ("\\end{"^EXP^"}\n")
      | ITENIZE EXP ("\\item"^EXP)
      | EXP CONCAT EXP (EXP1^EXP2)

      | EXP PLUS EXP ( plusString( trim(EXP1), trim(EXP2)) )
      | EXP TIMES EXP ( multiplyString( trim(EXP1), trim(EXP2)) )
      | EXP DIV EXP ( divideString( trim(EXP1), trim(EXP2)) )
      | EXP SUB EXP ( substractString( trim(EXP1), trim(EXP2)) )

      | PARAGRAPH ("")
      
      | TXT (TXT)
      

ITNONTERM :  IT EXP IT("\\textit{ "^EXP1^"}")
  | IT ASPAS EXP ASPAS IT("\\textit{''"^EXP1^"''}")
  | IT ASPAS EXP ASPAS EXP IT("\\textit{''"^EXP1^"''"^EXP2^"}")
  | IT EXP ASPAS EXP ASPAS IT("\\textit{"^EXP1^"''"^EXP2^"''}")
  | IT EXP ASPAS EXP ASPAS EXP IT("\\textit{"^EXP1^"''"^EXP2^"''"^EXP3^"}")
  
NEGNONTERM : NEG EXP NEG("\\textbf{ "^EXP^" }")
  | NEG ASPAS EXP ASPAS NEG("\\textbf{''"^EXP1^"''}")
  | NEG ASPAS EXP ASPAS EXP NEG("\\textbf{''"^EXP1^"''"^EXP2^"}")
  | NEG EXP ASPAS EXP ASPAS NEG("\\textbf{"^EXP1^"''"^EXP2^"''}")
  | NEG EXP ASPAS EXP ASPAS EXP NEG("\\textbf{"^EXP1^"''"^EXP2^"''"^EXP3^"}")
  
ITNEGNONTERM: ITNEG EXP ITNEG ("\\textbf{\\textit{ "^EXP^" }}")
  | ITNEG ASPAS EXP ASPAS ITNEG("\\textbf{\\textit{''"^EXP1^"''}}")
  | ITNEG ASPAS EXP ASPAS EXP ITNEG("\\textbf{\\textit{''"^EXP1^"''"^EXP2^"}}")
  | ITNEG EXP ASPAS EXP ASPAS ITNEG("\\textbf{\\textit{"^EXP1^"''"^EXP2^"''}}")
  | ITNEG EXP ASPAS EXP ASPAS EXP ITNEG("\\textbf{\\textit{"^EXP1^"''"^EXP2^"''"^EXP3^"}}")
  
ASPASNONTERM : ASPAS EXP ASPAS ("''"^EXP1^"''")
      | EXP ASPAS EXP ASPAS (EXP1^"''"^EXP2^"''")
      | ASPAS EXP ASPAS EXP("''"^EXP1^"''"^EXP2)
      | EXP ASPAS EXP ASPAS EXP(EXP1^"''"^EXP2^"''"^EXP3)
      | ASPAS EXP ASPAS ITNONTERM ("''"^EXP1^"''"^ITNONTERM)
      

      

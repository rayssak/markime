(* Sample latex-translator for ML-Yacc *)

fun print_exec(txt: string) =
  let
    val outs = TextIO.openAppend "teste.out"
    fun helper(txt_aux: string) =
          (TextIO.output(outs,txt_aux); TextIO.closeOut outs)
  in
    helper(txt)
  end

%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int


%term IT | NEG | LINK | ASPAS | SEMI | ITENIZE | PAR_OPEN | PAR_CLOSE | COMMAND_START | COMMAND_END | EOF | TXT of string
%nonterm EXP of string | START of string option 

%name Markime

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START :
        EXP (print_exec (EXP); print_exec "\n"; SOME EXP) 
	| LINK PAR_OPEN EXP PAR_CLOSE (print_exec "[ ";
		    print_exec (EXP); 
		    print_exec " ] {";
		    print_exec (EXP);
		    print_exec "}\n";
		    SOME EXP )
	| IT EXP IT (print_exec "\\textit{ ";
		    print_exec (EXP); 
		    print_exec " }\n"; 
		    SOME EXP)
	| IT ASPAS EXP ASPAS IT (print_exec "\\textit{ ``";
		    print_exec (EXP); 
		    print_exec " ''}\n"; 
		    SOME EXP)
	| IT EXP ASPAS EXP ASPAS IT (print_exec "\\textit{ ";
		    print_exec (EXP1);
		    print_exec "``";
		    print_exec (EXP2); 
		    print_exec " ''}\n"; 
		    SOME EXP)
	| IT ASPAS EXP ASPAS EXP IT (print_exec "\\textit{ ``";
		    print_exec (EXP1); 
		    print_exec "''";
		    print_exec (EXP2);
		    print_exec " }\n"; 
		    SOME EXP)
	| IT EXP ASPAS EXP ASPAS EXP IT (print_exec "\\textit{";
		    print_exec (EXP1); 
		    print_exec "``";
		    print_exec (EXP2);
		    print_exec "''";
		    print_exec (EXP3);
		    print_exec " }\n"; 
		    SOME EXP)
	| NEG EXP NEG (print_exec "\\textbf{ ";
		    print_exec (EXP); 
		    print_exec " }\n"; 
		    SOME EXP)
	| NEG ASPAS EXP ASPAS NEG (print_exec "\\textbf{ ``";
		    print_exec (EXP); 
		    print_exec "'' }\n"; 
		    SOME EXP)
	| NEG EXP ASPAS EXP ASPAS NEG (print_exec "\\textbf{ ";
	            print_exec (EXP1);
	            print_exec "``";
	            print_exec (EXP2);
		    print_exec "'' }\n"; 
		    SOME EXP)
	| NEG ASPAS EXP ASPAS EXP NEG (print_exec "\\textbf{ ``";
	            print_exec (EXP1);
	            print_exec "''" ;
	            print_exec (EXP2);
		    print_exec "}\n"; 
		    SOME EXP)
	| NEG EXP ASPAS EXP ASPAS EXP NEG (print_exec "\\textbf{ ";
	            print_exec (EXP1);
	            print_exec "``";
	            print_exec (EXP2);
	            print_exec "''" ;
	            print_exec (EXP3);
		    print_exec "}\n"; 
		    SOME EXP)
	| IT NEG EXP NEG IT (print_exec "\\textit{\\textbf{ ";
		    print_exec (EXP); 
		    print_exec " }}\n"; 
		    SOME EXP)
	| NEG IT EXP IT NEG(print_exec "\\textbf{\\textit{ ";
		    print_exec (EXP); 
		    print_exec " }}\n"; 
		    SOME EXP)
	| ASPAS EXP ASPAS (print_exec "``";
		    print_exec (EXP1);
		    print_exec "''\n";
		    SOME EXP)
 	| EXP ASPAS EXP ASPAS ( print_exec (EXP1);
		    print_exec "``";
		    print_exec (EXP2);
		    print_exec "''\n";
		    SOME EXP)
	| ASPAS EXP ASPAS EXP (print_exec "``";
		    print_exec (EXP1);
		    print_exec "''";
		    print_exec (EXP2);
		    print_exec "\n";
		    SOME EXP)
	| EXP ASPAS EXP ASPAS EXP ( print_exec (EXP1);
		    print_exec "``";
		    print_exec (EXP2);
		    print_exec "''";
		    print_exec (EXP3);
		    print_exec "\n";
		    SOME EXP)
	| COMMAND_START EXP (print_exec "\\begin{";
		    print_exec (EXP);
		    print_exec "} \n";
		    SOME EXP)
	| COMMAND_END EXP (print_exec "\\end{";
		    print_exec (EXP);
		    print_exec "}\n";
		    SOME EXP)
	| ITENIZE EXP (print_exec "\\item";
		    print_exec (EXP);
		    print_exec "\n";
		    SOME EXP)
	
        | (NONE)
  EXP  : TXT             (TXT)

(* Sample latex-translator for ML-Yacc *)

fun print_exec(txt: string) =
  let
    val outs = TextIO.openAppend "teste.out"
    fun helper(txt_aux: string) =
          (TextIO.output(outs,txt_aux); TextIO.closeOut outs)
  in
    helper(txt)
  end

fun printList ([]:string list) = print_exec ""
	| printList (h::nil:string list) = print_exec h
	| printList (h::tail:string list) =(print_exec h; printList tail);


%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int


%term IT | NEG | ITNEG | LINK | ASPAS | SEMI | ITENIZE | PAR_OPEN | PAR_CLOSE | COMMAND_START | COMMAND_END | EOF | TXT of string | CONCAT
%nonterm EXP of string | START of string option 

%name Markime

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START : EXP (print_exec(EXP^"\n"); (SOME EXP))
	| (NONE)

  EXP : TXT (TXT)
      | COMMAND_START EXP ("\\begin{"^EXP^"} ")
      | LINK PAR_OPEN EXP PAR_CLOSE ("[ "^EXP^" ] {"^EXP^"}")
      | IT EXP IT("\\textit{ "^EXP^" }")
      | NEG EXP NEG("\\textbf{ "^EXP^" }")
      | ITNEG EXP ITNEG ("\\textbf{\\textit{ "^EXP^" }}")
      | ASPAS EXP ASPAS ("''"^EXP1^"''")
      | COMMAND_END EXP ("\\end{"^EXP^"}")
      | ITENIZE EXP ("\\item"^EXP)
      | EXP CONCAT EXP (EXP1^EXP2)

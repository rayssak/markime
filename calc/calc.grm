(* Sample latex-translator for ML-Yacc *)

fun print_exec(txt: string) =
  let
    val outs = TextIO.openAppend "teste.out"
    fun helper(txt_aux: string) =
          (TextIO.output(outs,txt_aux); TextIO.closeOut outs)
  in
    helper(txt)
  end

%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int


%term IT | NEG | LINK | ASPAS | SEMI | PAR_OPEN | PAR_CLOSE | EOF | TXT of string
%nonterm EXP of string | START of string option 

%name Markime

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START :
        EXP (print_exec (EXP); print_exec "\n"; SOME EXP) 
	| LINK PAR_OPEN EXP PAR_CLOSE (print_exec "[ ";
		    print_exec (EXP); 
		    print_exec " ] {";
		    print_exec (EXP);
		    print_exec "}\n";
		    SOME EXP )
	| IT EXP IT (print_exec "textit{ ";
		    print_exec (EXP); 
		    print_exec " }\n"; 
		    SOME EXP)
	| NEG EXP NEG (print_exec "textbf{ ";
		    print_exec (EXP); 
		    print_exec " }\n"; 
		    SOME EXP)
	| ASPAS EXP ASPAS (print_exec "''";
		    print_exec (EXP);
		    print_exec "''";
		    SOME EXP)
	
        | (NONE)
  EXP  : TXT             (TXT)
